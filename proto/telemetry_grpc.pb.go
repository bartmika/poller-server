// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package tpoller_server

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TelemetryClient is the client API for Telemetry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TelemetryClient interface {
	GetTimeSeriesData(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (Telemetry_GetTimeSeriesDataClient, error)
}

type telemetryClient struct {
	cc grpc.ClientConnInterface
}

func NewTelemetryClient(cc grpc.ClientConnInterface) TelemetryClient {
	return &telemetryClient{cc}
}

func (c *telemetryClient) GetTimeSeriesData(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (Telemetry_GetTimeSeriesDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &Telemetry_ServiceDesc.Streams[0], "/proto.Telemetry/GetTimeSeriesData", opts...)
	if err != nil {
		return nil, err
	}
	x := &telemetryGetTimeSeriesDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Telemetry_GetTimeSeriesDataClient interface {
	Recv() (*TelemetryDatum, error)
	grpc.ClientStream
}

type telemetryGetTimeSeriesDataClient struct {
	grpc.ClientStream
}

func (x *telemetryGetTimeSeriesDataClient) Recv() (*TelemetryDatum, error) {
	m := new(TelemetryDatum)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TelemetryServer is the server API for Telemetry service.
// All implementations must embed UnimplementedTelemetryServer
// for forward compatibility
type TelemetryServer interface {
	GetTimeSeriesData(*empty.Empty, Telemetry_GetTimeSeriesDataServer) error
	mustEmbedUnimplementedTelemetryServer()
}

// UnimplementedTelemetryServer must be embedded to have forward compatible implementations.
type UnimplementedTelemetryServer struct {
}

func (UnimplementedTelemetryServer) GetTimeSeriesData(*empty.Empty, Telemetry_GetTimeSeriesDataServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTimeSeriesData not implemented")
}
func (UnimplementedTelemetryServer) mustEmbedUnimplementedTelemetryServer() {}

// UnsafeTelemetryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TelemetryServer will
// result in compilation errors.
type UnsafeTelemetryServer interface {
	mustEmbedUnimplementedTelemetryServer()
}

func RegisterTelemetryServer(s grpc.ServiceRegistrar, srv TelemetryServer) {
	s.RegisterService(&Telemetry_ServiceDesc, srv)
}

func _Telemetry_GetTimeSeriesData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServer).GetTimeSeriesData(m, &telemetryGetTimeSeriesDataServer{stream})
}

type Telemetry_GetTimeSeriesDataServer interface {
	Send(*TelemetryDatum) error
	grpc.ServerStream
}

type telemetryGetTimeSeriesDataServer struct {
	grpc.ServerStream
}

func (x *telemetryGetTimeSeriesDataServer) Send(m *TelemetryDatum) error {
	return x.ServerStream.SendMsg(m)
}

// Telemetry_ServiceDesc is the grpc.ServiceDesc for Telemetry service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Telemetry_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Telemetry",
	HandlerType: (*TelemetryServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTimeSeriesData",
			Handler:       _Telemetry_GetTimeSeriesData_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/telemetry.proto",
}
