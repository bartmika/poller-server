// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package tpoller_server

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TPollerClient is the client API for TPoller service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TPollerClient interface {
	PollTimeSeriesData(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (TPoller_PollTimeSeriesDataClient, error)
}

type tPollerClient struct {
	cc grpc.ClientConnInterface
}

func NewTPollerClient(cc grpc.ClientConnInterface) TPollerClient {
	return &tPollerClient{cc}
}

func (c *tPollerClient) PollTimeSeriesData(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (TPoller_PollTimeSeriesDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &TPoller_ServiceDesc.Streams[0], "/proto.TPoller/PollTimeSeriesData", opts...)
	if err != nil {
		return nil, err
	}
	x := &tPollerPollTimeSeriesDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TPoller_PollTimeSeriesDataClient interface {
	Recv() (*PolledTimeSeriesDatum, error)
	grpc.ClientStream
}

type tPollerPollTimeSeriesDataClient struct {
	grpc.ClientStream
}

func (x *tPollerPollTimeSeriesDataClient) Recv() (*PolledTimeSeriesDatum, error) {
	m := new(PolledTimeSeriesDatum)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TPollerServer is the server API for TPoller service.
// All implementations must embed UnimplementedTPollerServer
// for forward compatibility
type TPollerServer interface {
	PollTimeSeriesData(*empty.Empty, TPoller_PollTimeSeriesDataServer) error
	mustEmbedUnimplementedTPollerServer()
}

// UnimplementedTPollerServer must be embedded to have forward compatible implementations.
type UnimplementedTPollerServer struct {
}

func (UnimplementedTPollerServer) PollTimeSeriesData(*empty.Empty, TPoller_PollTimeSeriesDataServer) error {
	return status.Errorf(codes.Unimplemented, "method PollTimeSeriesData not implemented")
}
func (UnimplementedTPollerServer) mustEmbedUnimplementedTPollerServer() {}

// UnsafeTPollerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TPollerServer will
// result in compilation errors.
type UnsafeTPollerServer interface {
	mustEmbedUnimplementedTPollerServer()
}

func RegisterTPollerServer(s grpc.ServiceRegistrar, srv TPollerServer) {
	s.RegisterService(&TPoller_ServiceDesc, srv)
}

func _TPoller_PollTimeSeriesData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TPollerServer).PollTimeSeriesData(m, &tPollerPollTimeSeriesDataServer{stream})
}

type TPoller_PollTimeSeriesDataServer interface {
	Send(*PolledTimeSeriesDatum) error
	grpc.ServerStream
}

type tPollerPollTimeSeriesDataServer struct {
	grpc.ServerStream
}

func (x *tPollerPollTimeSeriesDataServer) Send(m *PolledTimeSeriesDatum) error {
	return x.ServerStream.SendMsg(m)
}

// TPoller_ServiceDesc is the grpc.ServiceDesc for TPoller service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TPoller_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TPoller",
	HandlerType: (*TPollerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PollTimeSeriesData",
			Handler:       _TPoller_PollTimeSeriesData_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/tpoller.proto",
}
